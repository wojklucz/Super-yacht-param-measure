import threading
import socket
import os.path
import serial
import time

class socket_client(threading.Thread):
    MYPORT = 50000
    COMM_PORT = 50001
    BUFFER_SIZE = 31
    COMM_BUFFER_SIZE = 28
    TIMEOUT = 200.0
    SERVGROUP = 'fe80::42a3:6bff:fec1:571b%eth0'
    MYGROUP = 'fe80::42a3:6bff:fec1:50f3%eth0'

    def __init__(self):
        threading.Thread.__init__(self)
        self.addrinfo = socket.getaddrinfo(self.MYGROUP, self.COMM_PORT, socket.AF_INET6, socket.SOCK_DGRAM)
        print self.addrinfo
        (family, socktype, proto, canonname, sockaddr) = self.addrinfo[0]
        self.socket = socket.socket(family, socktype, proto)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socket.bind(("", self.COMM_PORT))
        self.socket.settimeout(1.0)
        self.ser = serial.Serial('/dev/ttyS1')

    def run(self):
        fo = open("/root/source/commands.txt", "rw+")
        for line in fo.readlines():
            self.ser.write(line)
        self.sendInitialData()
        while 1:
            rdBytes = self.ser.read(self.BUFFER_SIZE)
            self.socket.sendto(rdBytes, (self.SERVGROUP, self.MYPORT, 0, self.addrinfo[0][4][3]))
            print rdBytes
            try:
                command = self.socket.recv(self.COMM_BUFFER_SIZE)
                if command[0]=='1':
                    self.sendInitialData()
                else:
                    self.ser.write(command)
            except:
                pass
        self.socket.close()

    def sendInitialData(self):
        data = 'struct50F11Zbiornik000000000000' #nazwa oniona
        self.socket.sendto(data, (self.SERVGROUP, self.MYPORT, 0, self.addrinfo[0][4][3]))
        data = '000000%|0000000|0000000|0000000' #jednostki
        self.socket.sendto(data, (self.SERVGROUP, self.MYPORT, 0, self.addrinfo[0][4][3]))

if __name__ == '__main__':
    #time.sleep(60)
    client = socket_client()
    client.start()
